$MODDE2

org 0000H
   ljmp MyProgram

MISO   EQU  P0.0 
MOSI   EQU  P0.1 
SCLK   EQU  P0.2
ce EQU  P0.3

CLK    EQU 33333333 
FREQ   EQU 33333333
BAUD   EQU 115200
T2LOAD EQU 65536-(FREQ/(32*BAUD))

DSEG at 30H
x:   ds 4
y:   ds 4
bcd: ds 5

BSEG
mf:     dbit 1

CSEG
$include(math32.asm)

myLUT:	; Look-up tables
    DB 0C0H, 0F9H, 0A4H, 0B0H, 099H        ; 0 TO 4
    DB 092H, 082H, 0F8H, 080H, 090H        ; 4 TO 9
    
ASCII:
	DB 30H, 31H, 32H, 33H, 34H			; 0 TO 4
	DB 35H, 36H, 37H, 38H, 39H			; 4 TO 9
	DB 088H, 083H, 0C6H, 0A1H, 086H, 0FFH	; A TO F
        
SendString:
	mov dptr, #ASCII
	; Display Digit 1 - no decimal points from integer division
 
    
    mov A, bcd+0
    swap a
    anl a, #0fh
    movc A, @A+dptr
    lcall putchar
	; Display Digit 0
    mov A, bcd+0
    anl a, #0fh
    movc A, @A+dptr
    lcall putchar
    mov a, #'\r'
    lcall putchar
    mov a, #'\n'
    lcall putchar
    ret


Wait1Sec: 
	mov R2, #180 
L3: mov R1, #250
L2: mov R0, #250
L1: djnz R0, L1
	djnz R1, L2
	djnz R2, L3
    ret

INIT_SPI:
    orl P0MOD, #00000110b ; Set SCLK, MOSI as outputs
    anl P0MOD, #11111110b ; Set MISO as input
    clr SCLK              ; For mode (0,0) SCLK is zero
	ret

InitSerialPort:
	clr TR2 ; Disable timer 2
	mov T2CON, #30H ; RCLK=1, TCLK=1 
	mov RCAP2H, #high(T2LOAD)  
	mov RCAP2L, #low(T2LOAD)
	setb TR2 ; Enable timer 2
	mov SCON, #52H
	ret
	
DO_SPI_G:
	push acc
    mov R1, #0            ; Received byte stored in R1
    mov R2, #8            ; Loop counter (8-bits)
DO_SPI_G_LOOP:
    mov a, R0             ; Byte to write is in R0
    rlc a                 ; Carry flag has bit to write
    mov R0, a
    mov MOSI, c
    setb SCLK             ; Transmit
    mov c, MISO           ; Read received bit
    mov a, R1             ; Save received bit in R1
    rlc a
    mov R1, a
    clr SCLK
    djnz R2, DO_SPI_G_LOOP
    pop acc
    ret



; Channel to read passed in register b
Read_ADC:
	
	clr CE
	mov R0, #00000001B ; Start bit:1
	lcall DO_SPI_G
	mov R0, #10000000B ; Single ended, read channel 0
	lcall DO_SPI_G

	mov a, R1 ; R1 contains bits 8 and 9
	anl a, #03H
	mov ledrb, a
	; we need to move A somewhere
	mov r3, a ; r3 has bits 8 and 9


	mov R0, #55H ; It doesn't matter what we transmit...


	lcall DO_SPI_G
	


	mov a, R1    ; R1 contains bits 0 to 7
	mov R4, a
	mov ledra, a
	setb ce
	ret

putchar:
    jnb TI, putchar
    clr TI
    mov SBUF, a
    ret
	
Convertandsend:
	mov x+1, R3
	mov x+0, R4
	
	
	load_y(500)
	lcall mul32

	load_y(1023)
	lcall div32
	
	Load_y(273)
	lcall sub32
	
	lcall hex2bcd
	lcall SendString
	
	
	ret

hexdisplay:
;digit 2
mov dptr, #mylut
mov a, bcd+0
swap a
anl a, #0fh
movc a, @a+dptr
mov hex5, a

;digit 2
mov a, bcd+0
anl a, #0FH
movc a, @a+dptr
mov hex4, a

ret

displayLCD:
; what about a warmth alarm??

ret

MyProgram:
	mov sp, #07FH
	clr a
	mov LEDG,  a
	mov LEDRA, a
	mov LEDRB, a
	mov LEDRC, a
	orl P0MOD, #00111000b ; make all CEs outputs	
	setb ce
	lcall INIT_SPI
	lcall InitSerialPort
	
	
Forever:
	lcall Read_ADC
	lcall convertandsend
	lcall hexdisplay
	lcall Wait1Sec
	sjmp Forever
END